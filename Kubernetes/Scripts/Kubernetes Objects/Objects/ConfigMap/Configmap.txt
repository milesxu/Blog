
*****************************************************************
******        Kubernetes常用对象【ConfigMap】              ******
*****************************************************************


创建ConfigMap：

方法一、通过YAML文件方式创建：

apiVersion: v1
kind: ConfigMap
metadata:
  name: test-cfg
  namespace: default
data:
  cache_host: memcached-gcxt
  cache_port: "11211"
  cache_prefix: gcxt
  my.cnf: |
    [mysqld]
    log-bin = mysql-bin
  app.properties: |
    property.1 = value-1
    property.2 = value-2
    property.3 = value-3

[root@master02 ~]# kubectl create -f test-cfg.yml
备注：
在yaml文件中，配置文件以key-value键值对的形式保存，当然也可以直接放一个完整的配置文件，
在下面的示例中，cache_hst、cache_port、cache_prefix即是key-value键值对，
而app.properties和my.cnf都是配置文件，注意形式，有加一个竖线


方法二、命令方式，一般不建议，没有YAML文件，只能用命令查看[kubectl describe configmap test-cfg]

1、直接将configs目录下的所有配置文件创建为一个ConfigMap：
[root@master02 ~]# kubectl create configmap test-config --from-file=./configs

2、直接将一个配置文件创建为一个ConfigMap
[root@master02 ~]# kubectl create configmap test-config2 --from-file=./configs/db.conf --from-file=./configs/cache.conf

3、在使用kubectl创建的时候，通过在命令行直接传递键值对创建
[root@master02 ~]# kubectl create configmap test-config3 --from-literal=db.host=10.5.10.116 --from-listeral=db.port='3306'


查看已创建的ConfigMap：
[root@master02 ~]# kubectl get configmaps
[root@master02 ~]# kubectl get configmap test-config -o yaml
[root@master02 ~]# kubectl describe configmap test-config


使用已创建的ConfigMap：
ConfigMap里配置的信息是给其它资源对象使用的，引用方法很下面几种，类似于配置中心，用于解耦应用与配置信息

ConfigMap的YAML文件：
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-config
  namespace: default
data:
  special.how : very
  special.type: charm

KV形式
special.how  = very
special.type = charm


方式1：传值方式

Pod示例
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
  - name: test-container
    image: gcr.io/google_containers/busybox
    command: [ "/bin/sh", "-c", "env" ]
    env:
    - name: SPECIAL_LEVEL_KEY
          valueFrom:
            configMapKeyRef:
              name: special-config
              key: special.how
    - name: SPECIAL_TYPE_KEY
          valueFrom:
            configMapKeyRef:
              name: special-config
              key: special.type
  restartPolicy: Never


apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: gcr.io/google_containers/busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        - name: CACHE_HOST
          valueFrom:
            configMapKeyRef:
              name: test-cfg
              key: cache_host
              optional: true
  restartPolicy: Never

apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: gcr.io/google_containers/busybox
      command: [ "/bin/sh", "-c", "echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)" ]
      env:
        - name: SPECIAL_LEVEL_KEY
          valueFrom:
            configMapKeyRef:
              name: special-config
              key: special.how
        - name: SPECIAL_TYPE_KEY
          valueFrom:
            configMapKeyRef:
              name: special-config
              key: special.type
  restartPolicy: Never


方式2：挂载方式
使用volume将ConfigMap作为文件或目录直接挂载，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容


将上面创建的ConfigMap直接挂载至pod的/etc/config目录下
Pod示例
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: gcr.io/google_containers/busybox
      command: [ "/bin/sh", "-c", "cat /etc/config/special.how" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
  restartPolicy: Never


只将ConfigMap的special.how这个key挂载到/etc/config目录下的一个相对路径path/to/special-key，如果存在同名文件，直接覆盖。其他的key不挂载
apiVersion: v1
kind: Pod
metadata:
  name: dapi-test-pod
spec:
  containers:
    - name: test-container
      image: gcr.io/google_containers/busybox
      command: [ "/bin/sh","-c","cat /etc/config/path/to/special-key" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
        items:
        - key: special.how
          path: path/to/special-key
  restartPolicy: Never

最后需要说明两点：
1、ConfigMap必须在Pod之前创建
2、只有与当前ConfigMap在同一个namespace内的pod才能使用这个ConfigMap，即ConfigMap不能跨命名空间调用










